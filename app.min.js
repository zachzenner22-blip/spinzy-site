(function(){ const wheelTabs = document.getElementById('wheelTabs'); const wheelArea = document.getElementById('wheelArea'); const addWheelBtn = document.getElementById('addWheel'); const clearAllBtn = document.getElementById('clearAll'); const themeToggle = document.getElementById('themeToggle'); const winnerModal = document.getElementById('winnerModal'); const winnerTitle = document.getElementById('winnerTitle'); const removeWinnerBtn = document.getElementById('removeWinnerBtn'); const closeModalBtn = document.getElementById('closeModal'); const winSound = document.getElementById('winSound'); const STORAGE_KEY = 'spinzy.v5.state'; let state = loadState() || defaultState(); let activeIndex = clamp(state.activeIndex ?? 0, 0, state.wheels.length-1); let lastWin = {wheel:0,index:0,name:null}; function defaultState(){ return { theme: 'dark', activeIndex: 0, wheels: [ { id: uid(), title: 'Default Wheel', names: ['Alice','Bob','Charlie','Dana'], firstInteracted:false } ] }; } function saveState(){ localStorage.setItem(STORAGE_KEY, JSON.stringify(state)); } function loadState(){ try{ return JSON.parse(localStorage.getItem(STORAGE_KEY)); }catch(e){ return null; } } function uid(){ return Math.random().toString(36).slice(2,9); } function clamp(n,a,b){ return Math.max(a, Math.min(b,n)); } const root = document.documentElement; if(state.theme==='dark'){ document.body.classList.add('dark'); } themeToggle.addEventListener('click', ()=>{ document.body.classList.toggle('dark'); state.theme = document.body.classList.contains('dark') ? 'dark' : 'light'; saveState(); }); function renderTabs(){ wheelTabs.innerHTML = ''; state.wheels.forEach((w, i)=>{ const tab = document.createElement('button'); tab.className = 'tab' + (i===activeIndex?' active':''); tab.textContent = (w.title || 'Wheel') + ' '; const badge = document.createElement('span'); badge.className='badge'; badge.textContent='('+(w.names.length||0)+')'; tab.appendChild(badge); tab.addEventListener('click', ()=>{ activeIndex=i; state.activeIndex=i; saveState(); render(); }); wheelTabs.appendChild(tab); }); } const confettiLayer = document.getElementById('confetti-layer'); const confettiCanvas = document.createElement('canvas'); confettiCanvas.width = innerWidth; confettiCanvas.height = innerHeight; confettiLayer.appendChild(confettiCanvas); const cctx = confettiCanvas.getContext('2d'); window.addEventListener('resize', ()=>{ confettiCanvas.width=innerWidth; confettiCanvas.height=innerHeight; }); function burstConfetti(x, y, colors){ const parts = []; for(let i=0;i<180;i++){ parts.push({ x, y, vx: (Math.random()*2-1)*6, vy: (Math.random()*-1)*6-2, g: 0.12 + Math.random()*0.08, life: 60 + Math.random()*40, size: 2 + Math.random()*4, color: colors[i%colors.length] }); } let frame = 0; function tick(){ cctx.clearRect(0,0,confettiCanvas.width,confettiCanvas.height); parts.forEach(p=>{ p.vy += p.g; p.x += p.vx; p.y += p.vy; p.life--; cctx.globalAlpha = Math.max(0, p.life/100); cctx.fillStyle = p.color; cctx.fillRect(p.x, p.y, p.size, p.size*1.6); }); cctx.globalAlpha = 1; frame++; if(frame<120) requestAnimationFrame(tick); } tick(); } const COLORS = ["#e74c3c","#3498db","#2ecc71","#f39c12","#9b59b6","#1abc9c","#e67e22","#ff69b4","#16a34a","#dc2626","#2563eb","#9333ea","#14b8a6","#f97316"]; function WheelComponent(wheel, index){ const wrap = document.createElement('div'); wrap.className = 'wheel-card'; const left = document.createElement('div'); left.className='canvas-wrap'; const canvas = document.createElement('canvas'); canvas.className='wheel'; canvas.width = 800; canvas.height = 800; left.appendChild(canvas); const label = document.createElement('div'); label.className='center-label'; label.textContent='Push to Spin'; left.appendChild(label); const right = document.createElement('aside'); right.className='side'; const head = document.createElement('div'); head.className='wheel-head'; const title = document.createElement('input'); title.className='title'; title.value = wheel.title || 'Untitled Wheel'; const del = document.createElement('button'); del.className='small-btn'; del.textContent='ðŸ—‘ Delete Wheel'; head.appendChild(title); head.appendChild(del); right.appendChild(head); const input = document.createElement('input'); input.placeholder='Add a name then press Enter'; input.className='input'; const resetBtn = document.createElement('button'); resetBtn.className='small-btn'; resetBtn.textContent='Reset List'; right.appendChild(input); right.appendChild(resetBtn); const ul = document.createElement('ul'); ul.className='list'; right.appendChild(ul); wrap.appendChild(left); wrap.appendChild(right); const ctx = canvas.getContext('2d'); let angle = 0; let spinning = false; let idle = !wheel.firstInteracted; let rafId = null; function draw(){ const W = canvas.width, H = canvas.height; ctx.clearRect(0,0,W,H); ctx.save(); ctx.translate(W/2, H/2); ctx.rotate(angle); const N = Math.max(1, wheel.names.length); const r = W/2 - 8; const slice = 2*Math.PI / N; for(let i=0;i<N;i++){ ctx.beginPath(); ctx.moveTo(0,0); ctx.arc(0,0,r, i*slice, (i+1)*slice); ctx.closePath(); ctx.fillStyle = COLORS[i % COLORS.length]; ctx.fill(); ctx.save(); ctx.rotate(i*slice + slice/2); ctx.fillStyle = '#fff'; ctx.font = 'bold 20px Inter, Arial'; ctx.textAlign = 'right'; ctx.fillText(wheel.names[i] || 'â€”', r-16, 6); ctx.restore(); } ctx.beginPath(); ctx.arc(0,0,r,0,Math.PI*2); ctx.lineWidth = 8; ctx.strokeStyle = 'rgba(255,255,255,0.85)'; ctx.stroke(); ctx.restore(); ctx.save(); ctx.translate(W/2, H/2); ctx.beginPath(); ctx.moveTo(0, -r-2); ctx.lineTo(-10, -r-22); ctx.lineTo(10, -r-22); ctx.closePath(); ctx.fillStyle = '#ffffff'; ctx.fill(); ctx.restore(); } function idleLoop(){ if(!idle) return; angle += 0.0025; // gentle spin draw(); rafId = requestAnimationFrame(idleLoop); } function spin(){ if(spinning || wheel.names.length===0) return; spinning = true; idle = false; if(rafId) cancelAnimationFrame(rafId); label.style.display='none'; wheel.firstInteracted = true; state.wheels[index] = wheel; saveState(); const N = wheel.names.length; const winnerIndex = Math.floor(Math.random()*N); lastWin = {wheel:index, index:winnerIndex, name:wheel.names[winnerIndex]}; const slice = 2*Math.PI/N; const current = angle; const rotations = 4 + Math.random()*2; // 4-6 spins const target = (-Math.PI/2) - ((winnerIndex+0.5)*slice) + (Math.PI*2)*Math.ceil(rotations); const delta = target - current; const duration = 4200; const start = performance.now(); if(typeof trackSpin==='function'){ try{ trackSpin(); }catch(e){} } (function anim(t0){ const now = performance.now(); const k = Math.min(1, (now-start)/duration); const e = 1 - Math.pow(1-k, 3); angle = current + delta*e; draw(); if(k<1) requestAnimationFrame(anim); else { spinning=false; const rect = canvas.getBoundingClientRect(); burstConfetti(rect.left + rect.width/2, rect.top + 40, COLORS); try{ winSound.currentTime=0; winSound.play().catch(()=>{});}catch(e){} showWinnerModal(wheel.names[winnerIndex], winnerIndex); } })(); } function showWinnerModal(name, indexInWheel){ winnerTitle.textContent = 'ðŸŽ‰ ' + name + ' ðŸŽ‰'; winnerModal.showModal(); removeWinnerBtn.onclick = ()=>{ wheel.names.splice(indexInWheel,1); updateList(); draw(); saveState(); winnerModal.close(); }; } function updateList(){ ul.innerHTML=''; wheel.names.forEach((n,i)=>{ const li=document.createElement('li'); const span=document.createElement('span'); span.textContent=n; span.addEventListener('click',()=>{ const inp=document.createElement('input'); inp.value=n; inp.className='input'; inp.addEventListener('blur',()=>{ wheel.names[i]=inp.value.trim()||n; saveState(); updateList(); draw(); }); inp.addEventListener('keydown',e=>{ if(e.key==='Enter'){ inp.blur(); } }); li.replaceChild(inp, span); inp.focus(); inp.select(); }); const rm=document.createElement('button'); rm.className='small-btn'; rm.textContent='âœ–'; rm.addEventListener('click',()=>{ wheel.names.splice(i,1); saveState(); updateList(); draw(); }); li.appendChild(span); li.appendChild(rm); ul.appendChild(li); }); } canvas.addEventListener('click', spin); input.addEventListener('keydown', e=>{ if(e.key==='Enter'){ const v = input.value.trim(); if(v){ wheel.names.push(v); input.value=''; saveState(); updateList(); draw(); } } }); resetBtn.addEventListener('click', ()=>{ wheel.names = []; saveState(); updateList(); draw(); }); title.addEventListener('blur', ()=>{ wheel.title = title.value.trim()||'Untitled Wheel'; saveState(); renderTabs(); }); del.addEventListener('click', ()=>{ if(state.wheels.length<=1){ alert('You must keep at least one wheel.'); return; } if(confirm('Delete this wheel?')){ state.wheels.splice(index,1); activeIndex = Math.max(0, activeIndex- (index<=activeIndex?1:0)); state.activeIndex = activeIndex; saveState(); render(); } }); closeModalBtn.addEventListener('click', ()=> winnerModal.close() ); updateList(); draw(); if(idle){ idleLoop(); } return wrap; } addWheelBtn.addEventListener('click', ()=>{ state.wheels.push({ id: uid(), title: 'New Wheel', names: [], firstInteracted:false }); activeIndex = state.wheels.length-1; state.activeIndex = activeIndex; saveState(); render(); }); clearAllBtn.addEventListener('click', ()=>{ if(confirm('Clear all wheels and reset?')){ state = defaultState(); activeIndex = 0; saveState(); render(); } }); function render(){ renderTabs(); wheelArea.innerHTML=''; const wheel = state.wheels[activeIndex]; wheelArea.appendChild(WheelComponent(wheel, activeIndex)); } render(); console.log('Spinzy v5 ready'); })();